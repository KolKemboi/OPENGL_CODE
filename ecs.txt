Components

| Component Name   | Purpose / Data Stored                       |
| ---------------- | ------------------------------------------- |
| **Transform**    | Position, rotation, scale                   |
| **Mesh**         | 3D model geometry data or mesh ID           |
| **Material**     | Texture, shader, color info                 |
| **Velocity**     | Movement speed and direction                |
| **Acceleration** | Change of velocity                          |
| **Health**       | Current and max health values               |
| **Input**        | Player input state (e.g. keys pressed)      |
| **Camera**       | Camera parameters (FOV, near/far clip)      |
| **Light**        | Light type, color, intensity                |
| **Collider**     | Shape and size for collision detection      |
| **RigidBody**    | Physics mass, velocity, forces              |
| **Animation**    | Current animation state, time               |
| **Script**       | Reference to behavior scripts               |
| **AIState**      | AI decision/state data                      |
| **SoundEmitter** | Audio clip references and playback settings |
| **Tag / Name**   | Identifier strings or tags                  |
| **Parent**       | Parent entity ID (for hierarchy)            |
| **Children**     | List of child entities                      |
| **Selectable**   | Marker to denote entity is selectable       |
| **SpawnPoint**   | Position and spawn parameters               |
| **Timer**        | Countdown or elapsed time                   |

Systems


| System Name              | Functionality                                        |
| ------------------------ | ---------------------------------------------------- |
| **RenderSystem**         | Draws meshes with materials using transforms         |
| **MovementSystem**       | Updates positions based on velocity and acceleration |
| **InputSystem**          | Processes player input and updates components        |
| **PhysicsSystem**        | Handles rigid body physics, collisions, forces       |
| **CollisionSystem**      | Detects and resolves collisions                      |
| **AnimationSystem**      | Updates animation states and blends frames           |
| **AISystem**             | Runs AI logic and decision making                    |
| **ScriptSystem**         | Executes custom behavior scripts                     |
| **CameraSystem**         | Updates camera position and view matrices            |
| **LightSystem**          | Manages lights and shadow casting                    |
| **SoundSystem**          | Plays and manages audio emitters                     |
| **HealthSystem**         | Manages entity health, damage, and death             |
| **UISystem**             | Updates and renders user interface                   |
| **SpawnSystem**          | Spawns new entities at spawn points                  |
| **TimerSystem**          | Updates timers and triggers events                   |
| **FrustumCullingSystem** | Optimizes rendering by skipping off-screen entities  |
| **PickingSystem**        | Handles mouse or ray picking to select entities      |
| **NetworkingSystem**     | Synchronizes entities over a network                 |
